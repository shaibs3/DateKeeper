name: CI Pipeline

on:
  push:
    branches: [ main, develop, test ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '22.x'

jobs:
  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Lint code
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:coverage

      - name: Upload results to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          fail_ci_if_error: false
        continue-on-error: true

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup environment variables
        run: |
          echo "NEXTAUTH_SECRET=test-secret-for-build-only-not-secure" >> $GITHUB_ENV
          echo "NEXTAUTH_URL=http://localhost:3000" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_ID=test-client-id" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_SECRET=test-client-secret" >> $GITHUB_ENV
          echo "DATABASE_URL=postgresql://test:test@localhost:5432/test" >> $GITHUB_ENV
          echo "APP_ENV=test" >> $GITHUB_ENV

      - name: Build application
        run: npm run build

  # Temporarily disabled E2E tests due to DATABASE_URL environment variable issues in CI
  # TODO: Re-enable once database setup is properly configured for CI environment
  # e2e-tests:
  #   name: E2E Tests
  #   runs-on: ubuntu-latest
  #   needs: [lint-and-format, test]
  #   
  #   services:
  #     postgres:
  #       image: postgres:15
  #       env:
  #         POSTGRES_PASSWORD: test_password
  #         POSTGRES_USER: test_user
  #         POSTGRES_DB: test_datekeeper
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 5432:5432
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: 'npm'
  #
  #     - name: Install dependencies
  #       run: npm ci
  #
  #     - name: Install Playwright browsers
  #       run: npx playwright install --with-deps chromium
  #
  #     - name: Setup test environment
  #       run: |
  #         echo "NEXTAUTH_SECRET=test-secret-for-e2e-testing" >> $GITHUB_ENV
  #         echo "NEXTAUTH_URL=http://localhost:3000" >> $GITHUB_ENV
  #         echo "GOOGLE_CLIENT_ID=test-client-id" >> $GITHUB_ENV
  #         echo "GOOGLE_CLIENT_SECRET=test-client-secret" >> $GITHUB_ENV
  #         echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_datekeeper" >> $GITHUB_ENV
  #         echo "APP_ENV=test" >> $GITHUB_ENV
  #
  #     - name: Run database migrations
  #       run: npx prisma migrate deploy
  #
  #     - name: Build application for E2E tests
  #       run: npm run build
  #
  #     - name: Start application
  #       run: npm start &
  #       
  #     - name: Wait for application to be ready
  #       run: npx wait-on http://localhost:3000 --timeout 60000
  #
  #     - name: Run E2E tests
  #       run: npm run test:e2e
  #
  #     - name: Upload test results
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: playwright-report
  #         path: playwright-report/
  #         retention-days: 7

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail the entire pipeline for security issues
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit (moderate and above)
        id: audit
        run: |
          echo "Running npm audit..."
          npm audit --audit-level moderate --json > audit-results.json || true
          
          # Check if there are any vulnerabilities
          VULN_COUNT=$(jq '.metadata.vulnerabilities.total // 0' audit-results.json)
          echo "Total vulnerabilities found: $VULN_COUNT"
          
          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "::warning::Found $VULN_COUNT security vulnerabilities"
            npm audit --audit-level moderate
            echo "audit-failed=true" >> $GITHUB_OUTPUT
          else
            echo "âœ… No security vulnerabilities found"
            echo "audit-failed=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for critical vulnerabilities only
        if: steps.audit.outputs.audit-failed == 'true'
        run: |
          echo "Checking for critical vulnerabilities that should fail the build..."
          CRITICAL_COUNT=$(jq '.metadata.vulnerabilities.critical // 0' audit-results.json)
          HIGH_COUNT=$(jq '.metadata.vulnerabilities.high // 0' audit-results.json)
          
          echo "Critical vulnerabilities: $CRITICAL_COUNT"
          echo "High vulnerabilities: $HIGH_COUNT"
          
          # Only fail on critical vulnerabilities
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "::error::Found $CRITICAL_COUNT critical vulnerabilities - failing build"
            exit 1
          elif [ "$HIGH_COUNT" -gt 0 ]; then
            echo "::warning::Found $HIGH_COUNT high severity vulnerabilities - consider fixing"
          fi

      - name: Upload audit results
        if: steps.audit.outputs.audit-failed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: audit-results.json
          retention-days: 30

      - name: Create security issue (on critical vulnerabilities)
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let auditData = {};
            
            try {
              auditData = JSON.parse(fs.readFileSync('audit-results.json', 'utf8'));
            } catch (e) {
              console.log('Could not read audit results');
              return;
            }
            
            const criticalCount = auditData.metadata?.vulnerabilities?.critical || 0;
            const highCount = auditData.metadata?.vulnerabilities?.high || 0;
            
            if (criticalCount > 0) {
              const issueTitle = "ðŸš¨ Critical Security Vulnerabilities Found - " + criticalCount + " critical, " + highCount + " high";
              const issueBody = "## Security Alert\n\n" +
                "**Critical vulnerabilities:** " + criticalCount + "\n" +
                "**High vulnerabilities:** " + highCount + "\n" +
                "**Workflow:** " + context.workflow + "\n" +
                "**Commit:** " + context.sha + "\n\n" +
                "### Action Required\n" +
                "- [ ] Review the security audit results\n" +
                "- [ ] Run `npm audit fix` to fix automatically fixable issues\n" +
                "- [ ] Manually update packages with breaking changes\n" +
                "- [ ] Test thoroughly after updates\n\n" +
                "### Commands to run:\n" +
                "```bash\n" +
                "npm audit\n" +
                "npm audit fix\n" +
                "npm audit fix --force  # if needed for breaking changes\n" +
                "```\n\n" +
                "**Note:** This issue was created automatically by the CI pipeline.";
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['security', 'critical', 'vulnerability']
              });
            }