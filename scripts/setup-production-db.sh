#!/bin/bash

echo "🗄️ Production Database Setup Guide (Neon PostgreSQL)"
echo "===================================================="
echo ""

echo "📋 Step-by-Step Instructions:"
echo ""

echo "1️⃣ Create Neon PostgreSQL Databases:"
echo "   → Go to: https://console.neon.tech"
echo "   → Sign in to your Neon account"
echo "   → Create Project or use existing project"
echo ""
echo "   Create TWO databases:"
echo "   📊 Staging: Create branch 'staging' or separate project"
echo "   🚀 Production: Use 'main' branch or create 'production' project"
echo ""

echo "2️⃣ Get Connection Strings:"
echo "   → In Neon Console, go to your project"
echo "   → Click 'Connection Details' or 'Connect'"
echo "   → Copy the connection string (Prisma format preferred)"
echo "   → Connection string format: postgresql://username:password@host/database?sslmode=require"
echo ""

echo "3️⃣ Add Environment Variables to Vercel:"
echo "   → Go to: https://vercel.com/dashboard"
echo "   → Select your DateKeeper project"
echo "   → Settings → Environment Variables"
echo ""
echo "   Add these variables for PRODUCTION:"
echo "   → DATABASE_URL: [Your production Neon connection string]"
echo "   → NEXTAUTH_SECRET: [Strong random secret for production]"
echo "   → NEXTAUTH_URL: https://datekeeper.vercel.app"
echo "   → GOOGLE_CLIENT_ID: [Your production Google OAuth client ID]"
echo "   → GOOGLE_CLIENT_SECRET: [Your production Google OAuth secret]"
echo "   → APP_ENV: production"
echo ""
echo "   Add these variables for PREVIEW (staging):"
echo "   → DATABASE_URL: [Your staging Neon connection string]"
echo "   → NEXTAUTH_SECRET: [Different random secret for staging]"
echo "   → NEXTAUTH_URL: https://datekeeper-staging.vercel.app"
echo "   → GOOGLE_CLIENT_ID: [Your staging Google OAuth client ID]"
echo "   → GOOGLE_CLIENT_SECRET: [Your staging Google OAuth secret]"
echo "   → APP_ENV: staging"
echo ""

echo "4️⃣ Generate Secrets:"
echo "   → NEXTAUTH_SECRET: Use a strong random string (32+ characters)"
echo "   → Generate with: openssl rand -base64 32"
echo "   → Or use: https://generate-secret.vercel.app/32"
echo ""

echo "5️⃣ Test Database Connection (Optional):"
echo "   → Set DATABASE_URL in your local .env.local"
echo "   → Run: npx prisma db pull"
echo "   → This will test the connection and sync your schema"
echo ""

echo "6️⃣ Deploy and Test:"
echo "   → Push to main branch"
echo "   → Deployment will run database migrations automatically"
echo "   → Your app will have access to all environment variables"
echo "   → Check deployment logs for success"
echo ""

echo "🔧 Troubleshooting:"
echo "   → If migrations fail: Check DATABASE_URL format and SSL settings"
echo "   → If connection fails: Verify Neon database is active (not suspended)"
echo "   → If SSL errors: Ensure ?sslmode=require is in connection string"
echo "   → If timeout: Neon databases auto-suspend, first query may be slower"
echo ""

echo "📚 Neon Connection String Format:"
echo "   Standard format:"
echo "   postgresql://username:password@ep-xxx-xxx.region.aws.neon.tech/database?sslmode=require"
echo ""
echo "   With connection pooling (recommended for production):"
echo "   postgresql://username:password@ep-xxx-xxx-pooler.region.aws.neon.tech/database?sslmode=require"
echo ""

echo "🌟 Neon PostgreSQL Benefits:"
echo "   → Serverless: Auto-scaling and auto-suspend"
echo "   → Branching: Database branches like Git branches"
echo "   → Fast: Sub-second cold starts"
echo "   → Cost-effective: Pay only for what you use"
echo "   → Prisma optimized: Built for modern development"
echo ""

echo "✅ Once complete, your production app will have:"
echo "   → Working Neon PostgreSQL connections"
echo "   → Automatic migrations on deployment"
echo "   → Serverless database scaling"
echo "   → Full authentication and data persistence"
echo "   → Database branching for staging/production"
echo ""

echo "🚀 Ready to set up your Neon production database!"
